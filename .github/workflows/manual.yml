# Workflow name displayed in GitHub Actions dashboard
name: Backend CI/CD Pipeline

# Define when this workflow is triggered; it runs on pull requests to the 'develop' branch
on:
  pull_request:
    branches:
      - development  # Triggers the workflow for pull requests targeting the 'development' branch
    paths:
      - "booked_backend/**"  # Ensures that the workflow only runs when files under 'booked_backend/' change

# Define the jobs for this workflow
jobs:
  # Job 1: Backend Testing and Auto-Merge to Development
  backend:
    # Display name for the job
    name: Run Tests and Auto-Merge to Development
    # Specifies the operating system for the runner (Ubuntu-based runner)
    runs-on: ubuntu-latest

    # Steps to execute in this job
    steps:
      # Step 1: Checkout code into the runner environment
      - name: Checkout code
        uses: actions/checkout@v2  # This action pulls the latest code into the runner

      # Step 2: Set up Python environment with a specified version
      - name: Set up Python
        uses: actions/setup-python@v2  # Uses GitHub's setup-python action to specify the Python version
        with:
          python-version: '3.9'  # Define the Python version to use

      # Step 3: Install Pipenv and backend dependencies
      - name: Install dependencies
        run: |
          pip install pipenv  # Install Pipenv for dependency and environment management
          pipenv install --dev  # Install all dependencies and dev dependencies specified in Pipfile
        working-directory: ./booked_backend  # Ensure this step runs in the 'booked_backend' directory

      # Step 4: Run tests using Pytest via Pipenv
      - name: Run Pytest
        run: |
          pipenv run pytest  # Execute tests within the Pipenv environment
        working-directory: ./booked_backend  # Run Pytest in the 'booked_backend' directory where tests are located

  # Job 2: Auto-Merge Feature Branch to Development
  merge-development:
    # Display name for this job
    name: Auto Merge to Development
    # This job only runs if the 'backend' job succeeds (i.e., tests pass)
    needs: backend
    runs-on: ubuntu-latest  # Use an Ubuntu runner for this job

    # Steps for this job
    steps:
      # Step 1: Checkout the latest code to prepare for the merge
      - name: Checkout code
        uses: actions/checkout@v2  # Action to pull the latest code into the runner

      # Step 2: Set up Git configuration to enable auto-merging by the GitHub Actions bot
      - name: Set up Git user
        run: |
          git config --global user.name "github-actions[bot]"  # Configure Git user name
          git config --global user.email "github-actions[bot]@users.noreply.github.com"  # Configure Git user email

      # Step 3: Merge the feature branch into the development branch
      - name: Merge feature to development
        run: |
          git fetch origin  # Fetch the latest remote changes
          git checkout development  # Checkout the 'development' branch
          git merge origin/feature-branch-name --no-ff -m "Auto-merging feature to development after tests pass"  # Merge the feature branch into 'development' with a message
          git push origin development  # Push the merge changes to the remote 'development' branch

  # Job 3: Auto-Merge Development Branch to Main
  merge-main:
    # Display name for this job
    name: Auto Merge to Main
    # This job only runs if the 'merge-development' job succeeds (i.e., feature successfully merged to 'development')
    needs: merge-development
    runs-on: ubuntu-latest  # Use an Ubuntu runner for this job

    # Steps for this job
    steps:
      # Step 1: Checkout the latest code to prepare for the merge
      - name: Checkout code
        uses: actions/checkout@v2  # Pull the latest code into the runner

      # Step 2: Configure Git for the GitHub Actions bot to enable auto-merging
      - name: Set up Git user
        run: |
          git config --global user.name "github-actions[bot]"  # Set Git user name for commit actions
          git config --global user.email "github-actions[bot]@users.noreply.github.com"  # Set Git user email

      # Step 3: Merge 'development' branch into 'main'
      - name: Merge development to main
        run: |
          git fetch origin  # Fetch the latest remote changes
          git checkout main  # Checkout the 'main' branch locally
          git merge origin/development --no-ff -m "Auto-merging development to main after successful deployment"  # Merge 'development' to 'main' with a message
          git push origin main  # Push the merged changes to the remote 'main' branch
