from sqlalchemy import Table, Column, Integer, Date, String, ForeignKey
from datetime import datetime, timedelta
from config import db

cart_items_association = Table('cart_items_association', db.Model.metadata,
    Column('user_id', Integer, ForeignKey('users.id'), primary_key=True),
    Column('book_id', Integer, ForeignKey('store_books.id'), primary_key=True),
    Column('quantity', Integer, nullable=False)
)

borrowings_association = Table('borrowings_association', db.Model.metadata,
    Column('user_id', Integer, ForeignKey('users.id'), primary_key=True),
    Column('book_id', Integer, ForeignKey('library_books.id'), primary_key=True),
    Column('date_borrowed', Date, default=datetime.utcnow),
    Column('due_date', Date, default=lambda: datetime.utcnow() + timedelta(days=70)),
    Column('date_returned', Date),
    Column('status', String, default='Pending')
)
from sqlalchemy.orm import relationship
from sqlalchemy_serializer import SerializerMixin
from datetime import datetime, timedelta
from config import db

class Borrowing(db.Model, SerializerMixin):
    __tablename__ = 'borrowings'
    serialize_rules = ('-user.borrowings', '-book.borrowings')

    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.Integer, db.ForeignKey('users.id'), nullable=False)
    book_id = db.Column(db.Integer, db.ForeignKey('library_books.id'), nullable=False)
    date_borrowed = db.Column(db.Date, nullable=False, default=datetime.utcnow)
    due_date = db.Column(db.Date, nullable=False, default=lambda: datetime.utcnow() + timedelta(days=70))
    date_returned = db.Column(db.Date)
    status = db.Column(db.String, default='Pending')

    # Relationships
    user = relationship('User', back_populates='borrowings')
    book = relationship('LibraryBook', back_populates='borrowings')

    def __repr__(self):
        return f'<Borrowing Book ID {self.book_id} by User ID {self.user_id}>'
from sqlalchemy.orm import relationship
from sqlalchemy_serializer import SerializerMixin
from config import db

class CartItem(db.Model, SerializerMixin):
    __tablename__ = 'cart_items'
    serialize_rules = ('-user.cart_items', '-book.cart_items')

    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.Integer, db.ForeignKey('users.id'), nullable=False)
    book_id = db.Column(db.Integer, db.ForeignKey('store_books.id'), nullable=False)
    quantity = db.Column(db.Integer, nullable=False)

    # Relationships
    user = relationship('User', back_populates='cart_items')
    book = relationship('StoreBook', back_populates='cart_items')

    def __repr__(self):
        return f'<CartItem User ID {self.user_id} Book ID {self.book_id} Quantity {self.quantity}>'
from sqlalchemy.orm import relationship
from sqlalchemy_serializer import SerializerMixin
from config import db

class LibraryBook(db.Model, SerializerMixin):
    __tablename__ = 'library_books'
    serialize_rules = ('-borrowings.book',)

    id = db.Column(db.Integer, primary_key=True)
    title = db.Column(db.String, nullable=False)
    author = db.Column(db.String, nullable=False)
    genre = db.Column(db.String, nullable=False)
    isbn = db.Column(db.String, unique=True, nullable=False)
    available_copies = db.Column(db.Integer, default=0)
    total_copies = db.Column(db.Integer, default=0)
    image_url = db.Column(db.String, nullable=True)

    # Relationships
    borrowings = relationship('Borrowing', back_populates='book', cascade='all, delete-orphan', lazy='joined')

    def __repr__(self):
from sqlalchemy.orm import relationship
from sqlalchemy_serializer import SerializerMixin
from datetime import datetime
from config import db

class Sale(db.Model, SerializerMixin):
    __tablename__ = 'sales'
    serialize_rules = ('-user.sales', '-book.sales')

    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.Integer, db.ForeignKey('users.id'), nullable=False)
    book_id = db.Column(db.Integer, db.ForeignKey('store_books.id'), nullable=False)
    date_of_sale = db.Column(db.Date, nullable=False, default=datetime.utcnow)
    quantity = db.Column(db.Integer, nullable=False)
    total_price = db.Column(db.Float, nullable=False)
    status = db.Column(db.String, default='Pending')

    # Relationships
    user = relationship('User', back_populates='sales')
    book = relationship('StoreBook', back_populates='sales')

    def __repr__(self):
from sqlalchemy.orm import relationship
from sqlalchemy_serializer import SerializerMixin
from config import db

class StoreBook(db.Model, SerializerMixin):
    __tablename__ = 'store_books'
    serialize_rules = ('-cart_items.book', '-sales.book')

    id = db.Column(db.Integer, primary_key=True)
    title = db.Column(db.String, nullable=False)
    author = db.Column(db.String, nullable=False)
    genre = db.Column(db.String, nullable=False)
    isbn = db.Column(db.String, unique=True, nullable=False)
    price = db.Column(db.Float, nullable=False)
    stock = db.Column(db.Integer, default=0)
    image_url = db.Column(db.String, nullable=True)

    # Relationships
    cart_items = relationship('CartItem', back_populates='book', cascade='all, delete-orphan', lazy='joined')
    sales = relationship('Sale', back_populates='book', cascade='all, delete-orphan', lazy='joined')

    def __repr__(self):
        return f'<StoreBook {self.title} by {self.author}>'
from sqlalchemy.orm import validates, relationship
from sqlalchemy_serializer import SerializerMixin
from flask_bcrypt import Bcrypt
from config import db
import re

bcrypt = Bcrypt()

class User(db.Model, SerializerMixin):
    __tablename__ = 'users'
    serialize_rules = ('-password_hash', '-borrowings.user', '-sales.user', '-cart_items.user')

    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String, nullable=False)
    email = db.Column(db.String, unique=True, nullable=False)
    password_hash = db.Column(db.String, nullable=False)
    is_admin = db.Column(db.Boolean, default=False)
    profile_image = db.Column(db.String, nullable=True)

    # Relationships
    borrowings = relationship('Borrowing', back_populates='user', cascade='all, delete-orphan', lazy='joined')
    sales = relationship('Sale', back_populates='user', cascade='all, delete-orphan', lazy='joined')
    cart_items = relationship('CartItem', back_populates='user', cascade='all, delete-orphan', lazy='joined')

    @validates('email')
    def validate_email(self, key, email):
        valid_email = r'^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$'
        if not re.match(valid_email, email):
            raise ValueError("Invalid email")
        return email

    def set_password(self, password):
        self.password_hash = bcrypt.generate_password_hash(password).decode('utf-8')

    def check_password(self, password):
        return bcrypt.check_password_hash(self.password_hash, password)

    def __repr__(self):
        return f'<User {self.name}, Email: {self.email}>'
